input {
  # Arduino computer send sensor data (every minute).
  http {
    type => "arduino-sensors"
    host => "192.168.1.5"
    port => 8383
    response_headers => {"Content-Type"=>"application/json"}
  }

  # Local weather data fetched (every five minutes).
  http_poller {
    type => "weather-local"
    urls=> {
      myurl => "http://api.wunderground.com/api/xxxxxxx/conditions/q/FL/Orlando.json"
    }
    # Every five minutes to comply with Wunderground free service terms.
    schedule => {cron => "*/5 * * * * UTC"}
  }

  # Fetching latest completed record from MySQL log table (every fixe minutes).
  jdbc {
    type => "reading-local-db"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://192.168.1.3:3306/plantstation"
    jdbc_user => "xxxxxxx"
    jdbc_password => "xxxxxxx"
    # Every five minutes to match weather update service.
    schedule => "*/5 * * * *"
    statement => "SELECT * FROM plantstation2log WHERE temp_current_loc_f IS NOT NULL ORDER BY date_added desc LIMIT 1"
  }

  stdin {}
}

filter {

  # Defining source and type of incoming message.
  json {source => "message"}

  # If incoming is weather information, parse and define fields of interest.
  if [type] == "weather-local" {
    mutate {
      add_field => {"TEMP_CURRENT_LOC_F" => "%{[current_observation][temp_f]}"}
      add_field => {"HUMIDITY_CURRENT_LOC" => "%{[current_observation][relative_humidity]}"}
      add_field => {"DEW_POINT_F" => "%{[current_observation][dewpoint_f]}"}
      add_field => {"UV_INDEX" => "%{[current_observation][UV]}"}
      add_field => {"PRECIPITATION" => "%{[current_observation][precip_1hr_in]}"}
      add_field => {"WEATHER_TEXT" => "%{[current_observation][weather]}"}
    }
  }
	
  # If incoming is from arduino sensors, and a UUID.
  if [type] == "arduino-sensors" {
    uuid {
      target => "UUID"
    }
  }
}

output {
  # If incoming is from arduino sensors, insert sensor data into MySQL and MSSQL tables.
  if [type] == "arduino-sensors" {
    jdbc {
      driver_class => "com.mysql.jdbc.Driver"
      connection_string => "jdbc:mysql://192.168.1.3:3306/plantstation?user=xxxxxxx&password=xxxxxxx"
      statement => [ "INSERT INTO plantstation2log (record_id, appid, location, temp_ambient_air_f, temp_pipe_air_f, temp_water_01_f, temp_water_02_f, temp_water_03_f, heat_index, humidity, light_percent, light_values, is_led_on, date_added, temp_current_loc_f, humidity_current_loc, dew_point_f, uv_index, precipitation, weather_text) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", "UUID" ,"APPID", "LOCATION", "TEMP_AMBIENT_AIR_F", "TEMP_PIPE_AIR_F", "TEMP_WATER_01_F", "TEMP_WATER_02_F", "TEMP_WATER_03_F", "HEAT_INDEX", "HUMIDITY", "LIGHT_PERCENT", "LIGHT_VALUES", "IS_LED_ON", "@timestamp", "TEMP_CURRENT_LOC_F", "HUMIDITY_CURRENT_LOC", "DEW_POINT_F", "UV_INDEX", "PRECIPITATION", "WEATHER_TEXT" ]
    }

    jdbc {
      driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
      connection_string => "jdbc:sqlserver://192.168.1.3:1433;databaseName=plantstation;user=xxxxxxx;password=xxxxxxx"
      statement => [ "INSERT INTO plantstation2log (record_id, appid, location, temp_ambient_air_f, temp_pipe_air_f, temp_water_01_f, temp_water_02_f, temp_water_03_f, heat_index, humidity, light_percent, light_values, is_led_on, date_added, temp_current_loc_f, humidity_current_loc, dew_point_f, uv_index, precipitation, weather_text) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", "UUID" ,"APPID", "LOCATION", "TEMP_AMBIENT_AIR_F", "TEMP_PIPE_AIR_F", "TEMP_WATER_01_F", "TEMP_WATER_02_F", "TEMP_WATER_03_F", "HEAT_INDEX", "HUMIDITY", "LIGHT_PERCENT", "LIGHT_VALUES", "IS_LED_ON", "@timestamp", "TEMP_CURRENT_LOC_F", "HUMIDITY_CURRENT_LOC", "DEW_POINT_F", "UV_INDEX", "PRECIPITATION", "WEATHER_TEXT" ]
    }
  }
  
  # If incoming is weather information, enrich MySQL and MSSQL records with such.
  if [type] == "weather-local" {

    jdbc {
      driver_class => "com.mysql.jdbc.Driver"
      connection_string => "jdbc:mysql://192.168.1.3:3306/plantstation?user=xxxxxxx&password=xxxxxxx"
      statement => [ "UPDATE plantstation2log SET temp_current_loc_f = ?, humidity_current_loc = left(?, length(?)-1), dew_point_f = ?, uv_index = ?, precipitation = ?, weather_text = ? WHERE weather_text is null", "TEMP_CURRENT_LOC_F", "HUMIDITY_CURRENT_LOC", "HUMIDITY_CURRENT_LOC", "DEW_POINT_F", "UV_INDEX", "PRECIPITATION", "WEATHER_TEXT" ]
    }

    jdbc {
      driver_class => "com.microsoft.sqlserver.jdbc.SQLServerDriver"
      connection_string => "jdbc:sqlserver://192.168.1.3:1433;databaseName=plantstation;user=xxxxxxx;password=xxxxxxx"
      statement => [ "UPDATE plantstation2log SET temp_current_loc_f = CAST(? AS DECIMAL), humidity_current_loc = left(?, len(?)-1), dew_point_f = ?, uv_index = ?, precipitation = ?, weather_text = ? WHERE weather_text is null", "TEMP_CURRENT_LOC_F", "HUMIDITY_CURRENT_LOC", "HUMIDITY_CURRENT_LOC", "DEW_POINT_F", "UV_INDEX", "PRECIPITATION", "WEATHER_TEXT" ]
    }
  }

  # If a completed record (sensor and weather) has been fetched from MySQL table, send complete record to DynamoDB.
  if [type] == "reading-local-db" {
    http {
      url => "https://xxxxxxx.us-east-1.amazonaws.com/001/plantstation2log"
      http_method => "post"
      message => '{
        "record_id":"record_id",
        "date_added":"date_added",
        "appid":"appid",
        "location":"location",
        "temp_ambient_air_f":"temp_ambient_air_f",
        "temp_pipe_air_f":"temp_pipe_air_f",
        "heat_index":"heat_index",
        "temp_water_01_f":"temp_water_01_f",
        "temp_water_02_f":"temp_water_02_f",
        "temp_water_03_f":"temp_water_03_f",
        "humidity":"humidity",
        "light_percent":"light_percent",
        "light_values":"light_values",
        "is_led_on":"is_led_on",
        "temp_current_loc_f":"temp_current_loc_f",
        "humidity_current_loc":"humidity_current_loc",
        "dew_point_f":"dew_point_f",
        "uv_index":"uv_index",
        "precipitation":"precipitation",
        "weather_text":"weather_text"
      }'
    }
  }

  stdout {codec => rubydebug}
}
